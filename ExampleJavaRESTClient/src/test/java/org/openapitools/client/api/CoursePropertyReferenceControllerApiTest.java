/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CollectionModelObject;
import org.openapitools.client.model.CollectionModelStudent;
import org.openapitools.client.model.EntityModelDegreetype;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CoursePropertyReferenceControllerApi
 */
@Disabled
public class CoursePropertyReferenceControllerApiTest {

    private final CoursePropertyReferenceControllerApi api = new CoursePropertyReferenceControllerApi();

    /**
     * patch-degreetype-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPropertyReferenceCoursePatchTest() throws ApiException {
        String id = null;
        CollectionModelObject collectionModelObject = null;
        EntityModelDegreetype response = api.createPropertyReferenceCoursePatch(id, collectionModelObject);
        // TODO: test validations
    }

    /**
     * patch-student-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPropertyReferenceCoursePatch1Test() throws ApiException {
        String id = null;
        CollectionModelObject collectionModelObject = null;
        CollectionModelStudent response = api.createPropertyReferenceCoursePatch1(id, collectionModelObject);
        // TODO: test validations
    }

    /**
     * update-degreetype-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPropertyReferenceCoursePutTest() throws ApiException {
        String id = null;
        CollectionModelObject collectionModelObject = null;
        EntityModelDegreetype response = api.createPropertyReferenceCoursePut(id, collectionModelObject);
        // TODO: test validations
    }

    /**
     * update-student-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPropertyReferenceCoursePut1Test() throws ApiException {
        String id = null;
        CollectionModelObject collectionModelObject = null;
        CollectionModelStudent response = api.createPropertyReferenceCoursePut1(id, collectionModelObject);
        // TODO: test validations
    }

    /**
     * delete-degreetype-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePropertyReferenceCourseDeleteTest() throws ApiException {
        String id = null;
        api.deletePropertyReferenceCourseDelete(id);
        // TODO: test validations
    }

    /**
     * delete-student-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePropertyReferenceCourseDelete1Test() throws ApiException {
        String id = null;
        api.deletePropertyReferenceCourseDelete1(id);
        // TODO: test validations
    }

    /**
     * delete-degreetype-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePropertyReferenceIdCourseDeleteTest() throws ApiException {
        String id = null;
        String propertyId = null;
        api.deletePropertyReferenceIdCourseDelete(id, propertyId);
        // TODO: test validations
    }

    /**
     * delete-student-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePropertyReferenceIdCourseDelete1Test() throws ApiException {
        String id = null;
        String propertyId = null;
        api.deletePropertyReferenceIdCourseDelete1(id, propertyId);
        // TODO: test validations
    }

    /**
     * get-degreetype-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followPropertyReferenceCourseGetTest() throws ApiException {
        String id = null;
        String propertyId = null;
        EntityModelDegreetype response = api.followPropertyReferenceCourseGet(id, propertyId);
        // TODO: test validations
    }

    /**
     * get-degreetype-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followPropertyReferenceCourseGet1Test() throws ApiException {
        String id = null;
        EntityModelDegreetype response = api.followPropertyReferenceCourseGet1(id);
        // TODO: test validations
    }

    /**
     * get-student-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followPropertyReferenceCourseGet2Test() throws ApiException {
        String id = null;
        String propertyId = null;
        CollectionModelStudent response = api.followPropertyReferenceCourseGet2(id, propertyId);
        // TODO: test validations
    }

    /**
     * get-student-by-course-Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followPropertyReferenceCourseGet21Test() throws ApiException {
        String id = null;
        CollectionModelStudent response = api.followPropertyReferenceCourseGet21(id);
        // TODO: test validations
    }

}
