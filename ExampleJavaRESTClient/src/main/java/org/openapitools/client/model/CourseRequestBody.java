/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CourseRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-15T13:53:34.748533Z[Europe/London]")
public class CourseRequestBody {
  public static final String SERIALIZED_NAME_COURSEID = "courseid";
  @SerializedName(SERIALIZED_NAME_COURSEID)
  private Integer courseid;

  public static final String SERIALIZED_NAME_DEGREETYPE = "degreetype";
  @SerializedName(SERIALIZED_NAME_DEGREETYPE)
  private String degreetype;

  public static final String SERIALIZED_NAME_STUDENTS = "students";
  @SerializedName(SERIALIZED_NAME_STUDENTS)
  private List<String> students = null;

  public CourseRequestBody() {
  }

  public CourseRequestBody courseid(Integer courseid) {
    
    this.courseid = courseid;
    return this;
  }

   /**
   * Get courseid
   * @return courseid
  **/
  @javax.annotation.Nullable

  public Integer getCourseid() {
    return courseid;
  }


  public void setCourseid(Integer courseid) {
    this.courseid = courseid;
  }


  public CourseRequestBody degreetype(String degreetype) {
    
    this.degreetype = degreetype;
    return this;
  }

   /**
   * Get degreetype
   * @return degreetype
  **/
  @javax.annotation.Nullable

  public String getDegreetype() {
    return degreetype;
  }


  public void setDegreetype(String degreetype) {
    this.degreetype = degreetype;
  }


  public CourseRequestBody students(List<String> students) {
    
    this.students = students;
    return this;
  }

  public CourseRequestBody addStudentsItem(String studentsItem) {
    if (this.students == null) {
      this.students = new ArrayList<>();
    }
    this.students.add(studentsItem);
    return this;
  }

   /**
   * Get students
   * @return students
  **/
  @javax.annotation.Nullable

  public List<String> getStudents() {
    return students;
  }


  public void setStudents(List<String> students) {
    this.students = students;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourseRequestBody courseRequestBody = (CourseRequestBody) o;
    return Objects.equals(this.courseid, courseRequestBody.courseid) &&
        Objects.equals(this.degreetype, courseRequestBody.degreetype) &&
        Objects.equals(this.students, courseRequestBody.students);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseid, degreetype, students);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CourseRequestBody {\n");
    sb.append("    courseid: ").append(toIndentedString(courseid)).append("\n");
    sb.append("    degreetype: ").append(toIndentedString(degreetype)).append("\n");
    sb.append("    students: ").append(toIndentedString(students)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courseid");
    openapiFields.add("degreetype");
    openapiFields.add("students");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CourseRequestBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CourseRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CourseRequestBody is not found in the empty JSON string", CourseRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CourseRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CourseRequestBody` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("degreetype") != null && !jsonObj.get("degreetype").isJsonNull()) && !jsonObj.get("degreetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `degreetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("degreetype").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("students") != null && !jsonObj.get("students").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `students` to be an array in the JSON string but got `%s`", jsonObj.get("students").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CourseRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CourseRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CourseRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CourseRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<CourseRequestBody>() {
           @Override
           public void write(JsonWriter out, CourseRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CourseRequestBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CourseRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CourseRequestBody
  * @throws IOException if the JSON string is invalid with respect to CourseRequestBody
  */
  public static CourseRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CourseRequestBody.class);
  }

 /**
  * Convert an instance of CourseRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

