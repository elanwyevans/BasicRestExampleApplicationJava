/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CoursenameRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-15T13:53:34.748533Z[Europe/London]")
public class CoursenameRequestBody {
  public static final String SERIALIZED_NAME_COURSENAMEID = "coursenameid";
  @SerializedName(SERIALIZED_NAME_COURSENAMEID)
  private Integer coursenameid;

  public static final String SERIALIZED_NAME_COURSENAME = "coursename";
  @SerializedName(SERIALIZED_NAME_COURSENAME)
  private String coursename;

  public static final String SERIALIZED_NAME_COURSENAMES = "coursenames";
  @SerializedName(SERIALIZED_NAME_COURSENAMES)
  private List<String> coursenames = null;

  public CoursenameRequestBody() {
  }

  public CoursenameRequestBody coursenameid(Integer coursenameid) {
    
    this.coursenameid = coursenameid;
    return this;
  }

   /**
   * Get coursenameid
   * @return coursenameid
  **/
  @javax.annotation.Nullable

  public Integer getCoursenameid() {
    return coursenameid;
  }


  public void setCoursenameid(Integer coursenameid) {
    this.coursenameid = coursenameid;
  }


  public CoursenameRequestBody coursename(String coursename) {
    
    this.coursename = coursename;
    return this;
  }

   /**
   * Get coursename
   * @return coursename
  **/
  @javax.annotation.Nullable

  public String getCoursename() {
    return coursename;
  }


  public void setCoursename(String coursename) {
    this.coursename = coursename;
  }


  public CoursenameRequestBody coursenames(List<String> coursenames) {
    
    this.coursenames = coursenames;
    return this;
  }

  public CoursenameRequestBody addCoursenamesItem(String coursenamesItem) {
    if (this.coursenames == null) {
      this.coursenames = new ArrayList<>();
    }
    this.coursenames.add(coursenamesItem);
    return this;
  }

   /**
   * Get coursenames
   * @return coursenames
  **/
  @javax.annotation.Nullable

  public List<String> getCoursenames() {
    return coursenames;
  }


  public void setCoursenames(List<String> coursenames) {
    this.coursenames = coursenames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoursenameRequestBody coursenameRequestBody = (CoursenameRequestBody) o;
    return Objects.equals(this.coursenameid, coursenameRequestBody.coursenameid) &&
        Objects.equals(this.coursename, coursenameRequestBody.coursename) &&
        Objects.equals(this.coursenames, coursenameRequestBody.coursenames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coursenameid, coursename, coursenames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoursenameRequestBody {\n");
    sb.append("    coursenameid: ").append(toIndentedString(coursenameid)).append("\n");
    sb.append("    coursename: ").append(toIndentedString(coursename)).append("\n");
    sb.append("    coursenames: ").append(toIndentedString(coursenames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coursenameid");
    openapiFields.add("coursename");
    openapiFields.add("coursenames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CoursenameRequestBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CoursenameRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoursenameRequestBody is not found in the empty JSON string", CoursenameRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CoursenameRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoursenameRequestBody` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("coursename") != null && !jsonObj.get("coursename").isJsonNull()) && !jsonObj.get("coursename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coursename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coursename").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("coursenames") != null && !jsonObj.get("coursenames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `coursenames` to be an array in the JSON string but got `%s`", jsonObj.get("coursenames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoursenameRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoursenameRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoursenameRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoursenameRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<CoursenameRequestBody>() {
           @Override
           public void write(JsonWriter out, CoursenameRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoursenameRequestBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CoursenameRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CoursenameRequestBody
  * @throws IOException if the JSON string is invalid with respect to CoursenameRequestBody
  */
  public static CoursenameRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoursenameRequestBody.class);
  }

 /**
  * Convert an instance of CoursenameRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

